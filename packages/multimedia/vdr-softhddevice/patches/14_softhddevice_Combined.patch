--- softhddevice.git/audio.c	2016-02-17 14:52:31.000000000 +0100
+++ softhddevice/audio.c	2016-03-02 00:17:13.000000000 +0100
@@ -148,6 +148,8 @@ static int AudioBufferTime = 336;	///< a
 #ifdef USE_AUDIO_THREAD
 static pthread_t AudioThread;		///< audio play thread
 static pthread_mutex_t AudioMutex;	///< audio condition mutex
+pthread_mutex_t PTS_mutex;		///< PTS mutex
+pthread_mutex_t ReadAdvance_mutex;	///< PTS mutex
 static pthread_cond_t AudioStartCond;	///< condition variable
 static char AudioThreadStop;		///< stop audio thread
 #else
@@ -168,10 +170,13 @@ static int AudioStereoDescent;		///< vol
 static int AudioVolume;			///< current volume (0 .. 1000)
 
 extern int VideoAudioDelay;		///< import audio/video delay
+extern volatile char SoftIsPlayingVideo;	///< stream contains video data
 
     /// default ring buffer size ~2s 8ch 16bit (3 * 5 * 7 * 8)
 static const unsigned AudioRingBufferSize = 3 * 5 * 7 * 8 * 2 * 1000;
 
+#define AUDIO_MIN_BUFFER_FREE (3072 * 8 * 8)
+
 static int AudioChannelsInHw[9];	///< table which channels are supported
 enum _audio_rates
 {					///< sample rates enumeration
@@ -857,6 +862,7 @@ static int AlsaPlayRingbuffer(void)
 #endif
 
 	for (;;) {
+  	    pthread_mutex_lock(&ReadAdvance_mutex);
 	    if (AlsaUseMmap) {
 		err = snd_pcm_mmap_writei(AlsaPCMHandle, p, frames);
 	    } else {
@@ -865,6 +871,7 @@ static int AlsaPlayRingbuffer(void)
 	    //Debug(3, "audio/alsa: wrote %d/%d frames\n", err, frames);
 	    if (err != frames) {
 		if (err < 0) {
+		    pthread_mutex_unlock(&ReadAdvance_mutex);
 		    if (err == -EAGAIN) {
 			continue;
 		    }
@@ -877,7 +884,7 @@ static int AlsaPlayRingbuffer(void)
 			snd_strerror(err));
 		    err = snd_pcm_recover(AlsaPCMHandle, err, 0);
 		    if (err >= 0) {
-			continue;
+			return 0;
 		    }
 		    Error(_("audio/alsa: snd_pcm_writei failed: %s\n"),
 			snd_strerror(err));
@@ -890,6 +897,7 @@ static int AlsaPlayRingbuffer(void)
 	    break;
 	}
 	RingBufferReadAdvance(AudioRing[AudioRingRead].RingBuffer, avail);
+	pthread_mutex_unlock(&ReadAdvance_mutex);
 	first = 0;
     }
 
@@ -960,7 +968,7 @@ static int AlsaThread(void)
 	}
 	break;
     }
-    if (!err || AudioPaused) {		// timeout or some commands
+    if (/*!err ||*/ AudioPaused) {		// timeout or some commands
 	return 1;
     }
 
@@ -2017,6 +2025,7 @@ static int AudioNextRing(void)
     int sample_rate;
     int channels;
     size_t used;
+    size_t remain;
 
     // update audio format
     // not always needed, but check if needed is too complex
@@ -2041,9 +2050,14 @@ static int AudioNextRing(void)
 	/ (AudioRing[AudioRingWrite].HwSampleRate *
 	    AudioRing[AudioRingWrite].HwChannels * AudioBytesProSample));
 
-    // stop, if not enough in next buffer
     used = RingBufferUsedBytes(AudioRing[AudioRingRead].RingBuffer);
-    if (AudioStartThreshold * 4 < used || (AudioVideoIsReady
+    remain = RingBufferFreeBytes(AudioRing[AudioRingRead].RingBuffer);
+    // stop, if not enough in next buffer
+    if (remain <= AUDIO_MIN_BUFFER_FREE) {
+	Debug(3, "audio: force start\n");
+    }
+    if (remain <= AUDIO_MIN_BUFFER_FREE || ((AudioVideoIsReady
+		|| !SoftIsPlayingVideo)
 	    && AudioStartThreshold < used)) {
 	return 0;
     }
@@ -2178,6 +2192,8 @@ static void AudioInitThread(void)
 {
     AudioThreadStop = 0;
     pthread_mutex_init(&AudioMutex, NULL);
+    pthread_mutex_init(&PTS_mutex, NULL);
+    pthread_mutex_init(&ReadAdvance_mutex, NULL);    
     pthread_cond_init(&AudioStartCond, NULL);
     pthread_create(&AudioThread, NULL, AudioPlayHandlerThread, NULL);
     pthread_setname_np(AudioThread, "softhddev audio");
@@ -2201,6 +2217,8 @@ static void AudioExitThread(void)
 	}
 	pthread_cond_destroy(&AudioStartCond);
 	pthread_mutex_destroy(&AudioMutex);
+	pthread_mutex_destroy(&PTS_mutex);
+	pthread_mutex_destroy(&ReadAdvance_mutex);  
 	AudioThread = 0;
     }
 }
@@ -2296,6 +2314,7 @@ void AudioEnqueue(const void *samples, i
 	}
     }
 
+    pthread_mutex_lock(&PTS_mutex);
     n = RingBufferWrite(AudioRing[AudioRingWrite].RingBuffer, buffer, count);
     if (n != (size_t) count) {
 	Error(_("audio: can't place %d samples in ring buffer\n"), count);
@@ -2307,6 +2326,7 @@ void AudioEnqueue(const void *samples, i
 
     if (!AudioRunning) {		// check, if we can start the thread
 	int skip;
+	size_t remain;
 
 	n = RingBufferUsedBytes(AudioRing[AudioRingWrite].RingBuffer);
 	skip = AudioSkip;
@@ -2328,8 +2348,12 @@ void AudioEnqueue(const void *samples, i
 	    n = RingBufferUsedBytes(AudioRing[AudioRingWrite].RingBuffer);
 	}
 	// forced start or enough video + audio buffered
-	// for some exotic channels * 4 too small
-	if (AudioStartThreshold * 4 < n || (AudioVideoIsReady
+	remain = RingBufferFreeBytes(AudioRing[AudioRingRead].RingBuffer);
+	if (remain <= AUDIO_MIN_BUFFER_FREE) {
+	    Debug(3, "audio: force start\n");
+	}
+	if (remain <= AUDIO_MIN_BUFFER_FREE || ((AudioVideoIsReady
+		    || !SoftIsPlayingVideo)
 		&& AudioStartThreshold < n)) {
 	    // restart play-back
 	    // no lock needed, can wakeup next time
@@ -2343,6 +2367,7 @@ void AudioEnqueue(const void *samples, i
 	    / (AudioRing[AudioRingWrite].HwSampleRate *
 	    AudioRing[AudioRingWrite].HwChannels * AudioBytesProSample);
     }
+    pthread_mutex_unlock(&PTS_mutex);
 }
 
 /**
@@ -2389,7 +2414,7 @@ void AudioVideoReady(int64_t pts)
 	// buffer ~15 video frames
 	// FIXME: HDTV can use smaller video buffer
 	skip =
-	    pts - 15 * 20 * 90 - AudioBufferTime * 90 - audio_pts +
+	    pts - 15 * 20 * 90 - AudioBufferTime * 90 - audio_pts -
 	    VideoAudioDelay;
 #ifdef DEBUG
 	fprintf(stderr, "%dms %dms %dms\n", (int)(pts - audio_pts) / 90,
@@ -2401,14 +2426,14 @@ void AudioVideoReady(int64_t pts)
 		/ (1000 * 90))
 		* AudioRing[AudioRingWrite].HwChannels * AudioBytesProSample;
 	    // FIXME: round to packet size
-	    if ((unsigned)skip > used) {
-		AudioSkip = skip - used;
-		skip = used;
-	    }
 	    Debug(3, "audio: sync advance %dms %d/%zd\n",
 		(skip * 1000) / (AudioRing[AudioRingWrite].HwSampleRate *
 		    AudioRing[AudioRingWrite].HwChannels *
 		    AudioBytesProSample), skip, used);
+	    if ((unsigned)skip > used) {
+		AudioSkip = skip - used;
+		skip = used;
+	    }
 	    RingBufferReadAdvance(AudioRing[AudioRingWrite].RingBuffer, skip);
 
 	    used = RingBufferUsedBytes(AudioRing[AudioRingWrite].RingBuffer);
@@ -2585,7 +2610,7 @@ int64_t AudioGetDelay(void)
 void AudioSetClock(int64_t pts)
 {
     if (AudioRing[AudioRingWrite].PTS != pts) {
-	Debug(4, "audio: set clock %s -> %s pts\n",
+	Debug(3, "audio: sync set clock %s -> %s pts\n",
 	    Timestamp2String(AudioRing[AudioRingWrite].PTS),
 	    Timestamp2String(pts));
     }
diff -Nrup softhddevice.git/softhddev.c softhddevice/softhddev.c
--- softhddevice.git/softhddev.c	2016-02-17 14:52:31.000000000 +0100
+++ softhddevice/softhddev.c	2016-03-02 00:17:13.000000000 +0100
@@ -81,7 +81,7 @@ static void DumpMpeg(const uint8_t * dat
 //////////////////////////////////////////////////////////////////////////////
 
 extern int ConfigAudioBufferTime;	///< config size ms of audio buffer
-extern int ConfigVideoClearOnSwitch;	//<  clear decoder on channel switch
+extern int ConfigVideoClearOnSwitch;	///<  clear decoder on channel switch
 char ConfigStartX11Server;		///< flag start the x11 server
 static signed char ConfigStartSuspended;	///< flag to start in suspend mode
 static char ConfigFullscreen;		///< fullscreen modus
@@ -3504,3 +3504,8 @@ int PipPlayVideo(const uint8_t * data, i
 }
 
 #endif
+
+int IsReplay(void)
+{
+    return !AudioSyncStream || AudioSyncStream->ClearClose;
+}
diff -Nrup softhddevice.git/softhddevice.cpp softhddevice/softhddevice.cpp
--- softhddevice.git/softhddevice.cpp	2015-10-31 11:13:49.000000000 +0100
+++ softhddevice/softhddevice.cpp	2016-03-02 00:17:13.000000000 +0100
@@ -183,6 +183,7 @@ static volatile int DoMakePrimary;	///<
 #define SUSPEND_NORMAL		1	///< normal suspend mode
 #define SUSPEND_DETACHED	2	///< detached suspend mode
 static signed char SuspendMode;		///< suspend mode
+volatile char SoftIsPlayingVideo;       ///< stream contains video data
 
 //////////////////////////////////////////////////////////////////////////////
 
@@ -2697,6 +2698,14 @@ int cSoftHdDevice::PlayTsVideo(const uch
 int cSoftHdDevice::PlayTsAudio(const uchar * data, int length)
 {
 #ifndef NO_TS_AUDIO
+    SoftIsPlayingVideo = cDevice::IsPlayingVideo();
+#ifdef DEBUG
+    static char last_SoftIsPlayingVideo;
+    if (last_SoftIsPlayingVideo != SoftIsPlayingVideo)
+	dsyslog("[softhddev]%s: SoftIsPlayingVideo: %d\n", __FUNCTION__, SoftIsPlayingVideo);
+    last_SoftIsPlayingVideo = SoftIsPlayingVideo;
+#endif
+
     return::PlayTsAudio(data, length);
 #else
     AudioPoller();
@@ -3217,6 +3226,7 @@ bool cPluginSoftHdDevice::SetupParse(con
     }
     if (!strcasecmp(name, "AudioBufferTime")) {
 	ConfigAudioBufferTime = atoi(value);
+	AudioSetBufferTime(ConfigAudioBufferTime);
 	return true;
     }
     if (!strcasecmp(name, "AudioAutoAES")) {
--- softhddevice.git/video.c	2016-02-17 14:52:31.000000000 +0100
+++ softhddevice/video.c	2016-03-02 00:17:13.000000000 +0100
@@ -167,12 +167,14 @@ typedef enum
 #include <libavcodec/vaapi.h>
 #include <libavutil/pixdesc.h>
 
-#if LIBAVCODEC_VERSION_INT >= AV_VERSION_INT(54,86,100)
+#if LIBAVCODEC_VERSION_INT >= AV_VERSION_INT(54,86,100) \
+	&& LIBAVCODEC_VERSION_INT < AV_VERSION_INT(56,60,100)
     ///
     /// ffmpeg version 1.1.1 calls get_format with zero width and height
     /// for H264 codecs.
     /// since version 1.1.3 get_format is called twice.
     /// ffmpeg 1.2 still buggy
+    /// ffmpeg 2.8 can fail with workaround
     ///
 #define FFMPEG_BUG1_WORKAROUND		///< get_format bug workaround
 #endif
@@ -398,6 +400,7 @@ static xcb_atom_t NetWmStateFullscreen;
 extern uint32_t VideoSwitch;		///< ticks for channel switch
 #endif
 extern void AudioVideoReady(int64_t);	///< tell audio video is ready
+extern int IsReplay(void);
 
 #ifdef USE_VIDEO_THREAD
 
@@ -405,6 +408,8 @@ static pthread_t VideoThread;		///< vide
 static pthread_cond_t VideoWakeupCond;	///< wakeup condition variable
 static pthread_mutex_t VideoMutex;	///< video condition mutex
 static pthread_mutex_t VideoLockMutex;	///< video lock mutex
+extern pthread_mutex_t PTS_mutex;	///< PTS mutex
+extern pthread_mutex_t ReadAdvance_mutex;	///< PTS mutex
 
 #endif
 
@@ -5134,7 +5139,11 @@ static void VaapiSyncDecoder(VaapiDecode
     int64_t video_clock;
 
     err = 0;
+    pthread_mutex_lock(&PTS_mutex);
+    pthread_mutex_lock(&ReadAdvance_mutex);
     audio_clock = AudioGetClock();
+    pthread_mutex_unlock(&ReadAdvance_mutex);
+    pthread_mutex_unlock(&PTS_mutex);
     video_clock = VaapiGetClock(decoder);
     filled = atomic_read(&decoder->SurfacesFilled);
 
@@ -5181,10 +5190,17 @@ static void VaapiSyncDecoder(VaapiDecode
 	&& video_clock != (int64_t) AV_NOPTS_VALUE) {
 	// both clocks are known
 	int diff;
+	int upper_limit;
+	int lower_limit;
 
 	diff = video_clock - audio_clock - VideoAudioDelay;
-	diff = (decoder->LastAVDiff + diff) / 2;
-	decoder->LastAVDiff = diff;
+	// FIXME: for Rai SD on Hotbird 110 are needed
+	upper_limit = !IsReplay() ? 55 : 15;
+	lower_limit = !IsReplay() ? -25 : -8; 
+	if (!IsReplay()) {
+	    diff = (decoder->LastAVDiff + diff) / 2;
+	    decoder->LastAVDiff = diff;
+	}
 
 	if (abs(diff) > 5000 * 90) {	// more than 5s
 	    err = VaapiMessage(2, "video: audio/video difference too big\n");
@@ -5194,12 +5210,12 @@ static void VaapiSyncDecoder(VaapiDecode
 	    ++decoder->FramesDuped;
 	    decoder->SyncCounter = 1;
 	    goto out;
-	} else if (diff > 55 * 90) {
+	} else if (diff > upper_limit * 90) {
 	    err = VaapiMessage(2, "video: slow down video, duping frame\n");
 	    ++decoder->FramesDuped;
 	    decoder->SyncCounter = 1;
 	    goto out;
-	} else if (diff < -25 * 90 && filled > 1 + 2 * decoder->Interlaced) {
+	} else if (diff < lower_limit * 90 && filled > 1 + 2 * decoder->Interlaced) {
 	    err = VaapiMessage(2, "video: speed up video, droping frame\n");
 	    ++decoder->FramesDropped;
 	    VaapiAdvanceDecoderFrame(decoder);
@@ -8868,7 +8884,11 @@ static void VdpauSyncDecoder(VdpauDecode
 	// FIXME: 60Hz Mode
 	goto skip_sync;
     }
+    pthread_mutex_lock(&PTS_mutex);
+    pthread_mutex_lock(&ReadAdvance_mutex);
     audio_clock = AudioGetClock();
+    pthread_mutex_unlock(&ReadAdvance_mutex);
+    pthread_mutex_unlock(&PTS_mutex);
 
     // 60Hz: repeat every 5th field
     if (Video60HzMode && !(decoder->FramesDisplayed % 6)) {
@@ -8912,10 +8932,17 @@ static void VdpauSyncDecoder(VdpauDecode
 	&& video_clock != (int64_t) AV_NOPTS_VALUE) {
 	// both clocks are known
 	int diff;
+	int upper_limit;
+	int lower_limit;
 
 	diff = video_clock - audio_clock - VideoAudioDelay;
-	diff = (decoder->LastAVDiff + diff) / 2;
-	decoder->LastAVDiff = diff;
+	// FIXME: for Rai SD on Hotbird 110 are needed
+	upper_limit = !IsReplay() ? 55 : 15;
+	lower_limit = !IsReplay() ? -25 : -8; 
+	if (!IsReplay()) {
+	    diff = (decoder->LastAVDiff + diff) / 2;
+	    decoder->LastAVDiff = diff;
+	}
 
 	if (abs(diff) > 5000 * 90) {	// more than 5s
 	    err = VdpauMessage(2, "video: audio/video difference too big\n");
@@ -8925,12 +8952,12 @@ static void VdpauSyncDecoder(VdpauDecode
 	    ++decoder->FramesDuped;
 	    decoder->SyncCounter = 1;
 	    goto out;
-	} else if (diff > 55 * 90) {
+	} else if (diff > upper_limit * 90) {
 	    err = VdpauMessage(2, "video: slow down video, duping frame\n");
 	    ++decoder->FramesDuped;
 	    decoder->SyncCounter = 1;
 	    goto out;
-	} else if (diff < -25 * 90 && filled > 1 + 2 * decoder->Interlaced) {
+	} else if (diff < lower_limit * 90 && filled > 1 + 2 * decoder->Interlaced) {
 	    err = VdpauMessage(2, "video: speed up video, droping frame\n");
 	    ++decoder->FramesDropped;
 	    VdpauAdvanceDecoderFrame(decoder);
